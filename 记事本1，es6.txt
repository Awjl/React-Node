第一步  
安装  create-react-app 
index.js  = vue 中的 main.js
第二步 
安装 redux
npm install redux --save
//  npm run eject 弹出配置文件，可以自定义配置webpack
//  扩展package.json 里的script 字段，扩展 npm run 命令
第三步
es6  常用语法
1.1
let 和 const
定义 变量使用let 代替let
const 定义不可修改变量
作用于和{ 块级作用域 }
1.2
字符串
模板字符出纳
使用 反引号，直接写变量
多行字符串
告别+拼接字符串
1.3
函数扩展
参数默认值   
const hello = (name="imooc") => {
    console.log(`hello:${name}`)
}

function hello (name1, name2) {
    console.log(name1, name2)
}
let arr = ['imooc', 'woniu']
hello.apply (null, arr) //  之前写法
现在直接可以使用 扩展 ...(展开符)
hello (...arr)
箭头函数 () => {}
function hello (name)(){
    console.log(name)
}
const hello1 = (name) =>{
    console.log(name)
}
setTimeout (()=>{
    console.log('xxx')
}, 1000)
扩展运算符 ...
1.4
对象扩展
object,keys values entries
const obj = {
    name: "imooc",
    course: 'react 开发'
}
console.log(object.keys(obj))
console.log(object.values(obj))
console.log(object.entries(obj)) key 和 value  分别变成数组
赋值
const name = 'imooc'
const obj = {}
obj[name] = 'hello imooc'
或者
const obj = {
    [name] = "hello",
    hello: function() {
        // 之前写法
    },
    hello1() {
        // 现在写法
    }
}
对象 方法简写，计算属性
展开运算符，（不是es6标准，但是babel也支持）
const obj = {
    name: 'imooc', course :'react'
}
const obj2 = {
    type: 'it', name :'woniu'
}
console.log({...obj,...obj},data: '2017')
1.5
解构赋值
数组解构
const arr = ['hello', 'imooc']
// 之前写法
let arg1 = arr[0]
let arg2 = arr[1]
// 现在写法
let [arg1, arg2] = arr
对象解构
const obj = {
    name:"imooc",
    course: "react"
}
const {name, course} = obj
1.6
类
是prototype 的语法糖
Extends 继承
Constructor 构造函数
calss myApp {
    Constructor() {    
        this.name = "imooc"
    },
    sayHello() {
        console.log(`hello: ${this.name}`)
    }
}
const app = new MyApp ()
app.sayHello
1.7
新的数据结构
set, 元素不可重合
Map
Symbol
1.8
模块化
Import, import{}  引入
Export, Export default  导出
Node 现在还不支持，还需要用require来加载文件
打印所有的到处的值
import * as '模块' from '地址' 


遍历一个数组
const arr = [1,2,3]
console.log(arr.map(function (v) {
    return v*2
}))
console.log (arr.map(v=> v*2))